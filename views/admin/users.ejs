<%- include('../partials/header') %>

<div class="admin-container">
    <div class="admin-card">
        <h2>
            <i class="fas fa-users-cog"></i>
            Manage Users
        </h2>
        <div class="users-list">
            <% users.forEach(user => { %>
                <div class="user-item">
                    <div class="user-info">
                        <div class="user-avatar">
                            <% if (user.profilePicture) { %>
                                <img src="<%= user.profilePicture %>" alt="Profile">
                            <% } else { %>
                                <div class="initials-avatar">
                                    <%= user.name.split(' ').map(word => word[0]).join('').toUpperCase().slice(0, 2) %>
                                </div>
                            <% } %>
                        </div>
                        <div class="user-details">
                            <h3 class="user-name" data-user-id="<%= user._id %>">
                                <%= user.name %>
                                <button class="edit-name-btn" title="Edit Name">
                                    <i class="fas fa-pen"></i>
                                </button>
                            </h3>
                            <p class="user-email"><%= user.email %></p>
                            <p class="user-created">Joined: <%= new Date(user.createdAt).toLocaleDateString() %></p>
                        </div>
                    </div>
                    <div class="user-actions">
                        <% if (user.email !== 'inbox@danielfaria.cc') { %>
                            <button class="delete-user-btn danger-button" data-user-id="<%= user._id %>">
                                <i class="fas fa-trash"></i> Delete
                            </button>
                        <% } %>
                    </div>
                </div>
            <% }); %>
        </div>
    </div>
</div>

<div id="editNameModal" class="modal">
    <div class="modal-content">
        <h3>Edit User Name</h3>
        <form id="editNameForm">
            <input type="hidden" id="editUserId">
            <div class="form-group">
                <label for="newName">New Name</label>
                <input type="text" id="newName" required>
            </div>
            <div class="modal-actions">
                <button type="button" class="btn-secondary" onclick="closeModal()">Cancel</button>
                <button type="submit" class="btn-primary">Save</button>
            </div>
        </form>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Edit name functionality
    const editButtons = document.querySelectorAll('.edit-name-btn');
    const modal = document.getElementById('editNameModal');
    const editNameForm = document.getElementById('editNameForm');
    const editUserId = document.getElementById('editUserId');
    const newNameInput = document.getElementById('newName');

    editButtons.forEach(button => {
        button.addEventListener('click', function() {
            const userItem = this.closest('.user-name');
            const userId = userItem.dataset.userId;
            const currentName = userItem.childNodes[0].textContent.trim();
            
            editUserId.value = userId;
            newNameInput.value = currentName;
            modal.style.display = 'flex';
        });
    });

    editNameForm.addEventListener('submit', async function(e) {
        e.preventDefault();
        const userId = editUserId.value;
        const newName = newNameInput.value;

        try {
            const response = await fetch(`/administration/users/${userId}/update-name`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ name: newName })
            });

            const data = await response.json();
            
            if (data.error) {
                Toast.error(data.error);
            } else {
                Toast.success('Name updated successfully');
                location.reload();
            }
        } catch (error) {
            Toast.error('An error occurred');
        }
    });

    // Delete user functionality
    const deleteButtons = document.querySelectorAll('.delete-user-btn');
    
    deleteButtons.forEach(button => {
        button.addEventListener('click', async function() {
            if (!confirm('Are you sure you want to delete this user? This action cannot be undone.')) {
                return;
            }

            const userId = this.dataset.userId;

            try {
                const response = await fetch(`/administration/users/${userId}/delete`, {
                    method: 'DELETE'
                });

                const data = await response.json();
                
                if (data.error) {
                    Toast.error(data.error);
                } else {
                    Toast.success('User deleted successfully');
                    this.closest('.user-item').remove();
                }
            } catch (error) {
                Toast.error('An error occurred');
            }
        });
    });
});

function closeModal() {
    document.getElementById('editNameModal').style.display = 'none';
}

// Close modal when clicking outside
window.onclick = function(event) {
    const modal = document.getElementById('editNameModal');
    if (event.target == modal) {
        modal.style.display = 'none';
    }
}
</script>

<style>
.users-list {
    display: flex;
    flex-direction: column;
    gap: 1rem;
}

.user-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem;
    background: rgba(255, 255, 255, 0.05);
    border-radius: 8px;
    transition: all 0.3s ease;
}

.user-item:hover {
    background: rgba(255, 255, 255, 0.08);
}

.user-info {
    display: flex;
    align-items: center;
    gap: 1rem;
}

.user-avatar {
    width: 50px;
    height: 50px;
    border-radius: 50%;
    overflow: hidden;
}

.user-avatar img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.initials-avatar {
    width: 100%;
    height: 100%;
    background: var(--gradient);
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-weight: bold;
}

.user-details h3 {
    margin: 0;
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.edit-name-btn {
    background: none;
    border: none;
    color: var(--accent);
    cursor: pointer;
    padding: 0.2rem;
    opacity: 0.7;
    transition: opacity 0.3s ease;
}

.edit-name-btn:hover {
    opacity: 1;
}

.user-email {
    color: var(--text-secondary);
    margin: 0.2rem 0;
}

.user-created {
    font-size: 0.8rem;
    color: var(--text-secondary);
    margin: 0;
}

.modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.7);
    justify-content: center;
    align-items: center;
    z-index: 1000;
}

.modal-content {
    background: var(--card-bg);
    padding: 2rem;
    border-radius: 8px;
    width: 90%;
    max-width: 500px;
}

.modal-actions {
    display: flex;
    justify-content: flex-end;
    gap: 1rem;
    margin-top: 1.5rem;
}

@media (max-width: 768px) {
    .user-item {
        flex-direction: column;
        align-items: flex-start;
        gap: 1rem;
    }

    .user-actions {
        width: 100%;
        display: flex;
        justify-content: flex-end;
    }
}
</style>

<%- include('../partials/footer') %> 