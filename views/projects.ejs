<%- include('partials/header') %>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">

<section class="projects">
    <h2>My Projects</h2>
    <div class="project-grid" id="projectGrid">
        <% projects.forEach(project => { %>
            <div class="project-card" draggable="<%= user && user.email === 'inbox@danielfaria.cc' ? 'true' : 'false' %>" data-id="<%= project.id %>">
                <% if (user && user.email === 'inbox@danielfaria.cc') { %>
                    <div class="drag-handle">
                        <i class="fas fa-grip-lines"></i>
                    </div>
                <% } %>
                <h3><%= project.title %></h3>
                <p><%= project.description %></p>
                <% if (user && user.email === 'inbox@danielfaria.cc') { %>
                    <div class="project-actions">
                        <button onclick="editProject(<%= project.id %>)" class="icon-btn edit-btn">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button onclick="deleteProject(<%= project.id %>)" class="icon-btn delete-btn">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                <% } %>
            </div>
        <% }); %>
    </div>
    <% if (user && user.email === 'inbox@danielfaria.cc') { %>
        <button onclick="showProjectForm('add')" class="admin-button">Add Project</button>
    <% } %>
</section>

<!-- PIN Modal -->
<div id="pinModal" class="modal">
    <div class="modal-content">
        <h3>This Function Is for Daniel Only! Enter PIN</h3>
        <input type="password" id="pinInput" maxlength="4" placeholder="Enter PIN">
        <button onclick="verifyPin()">Submit</button>
    </div>
</div>

<!-- Add/Edit Project Form -->
<div id="projectForm" class="modal">
    <div class="modal-content">
        <h3>Add New Project</h3>
        <form id="projectFormContent" action="/add-project" method="POST">
            <input type="text" name="title" placeholder="Project Title" required>
            <textarea name="description" placeholder="Project Description" required></textarea>
            <button type="submit" class="submit-button">Save Project</button>
        </form>
    </div>
</div>

<script>
let currentAction = '';
let currentProjectId = null;
let saveTimeout;

function showPinModal(action, projectId = null) {
    currentAction = action;
    currentProjectId = projectId;
    document.getElementById('pinModal').style.display = 'flex';
}

async function verifyPin() {
    const pin = document.getElementById('pinInput').value;
    const response = await fetch('/verify-pin', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ pin })
    });
    
    const data = await response.json();
    if (data.success) {
        document.getElementById('pinModal').style.display = 'none';
        handleAction();
    } else {
        alert('Incorrect PIN');
    }
}

function handleAction() {
    switch(currentAction) {
        case 'reorder':
            saveNewOrder();
            break;
        case 'add':
            document.getElementById('projectForm').style.display = 'flex';
            document.getElementById('projectFormContent').reset();
            document.querySelector('.modal-content h3').textContent = 'Add New Project';
            document.getElementById('projectFormContent').action = '/add-project';
            break;
        case 'delete':
            if(confirm('Are you sure you want to delete this project?')) {
                deleteProject(currentProjectId);
            }
            break;
        case 'edit':
            const project = findProject(currentProjectId);
            if (project) {
                document.getElementById('projectForm').style.display = 'flex';
                document.querySelector('.modal-content h3').textContent = 'Edit Project';
                document.querySelector('input[name="title"]').value = project.title;
                document.querySelector('textarea[name="description"]').value = project.description;
                document.getElementById('projectFormContent').action = '/edit-project';
                let hiddenInput = document.getElementById('projectId') || document.createElement('input');
                hiddenInput.type = 'hidden';
                hiddenInput.name = 'id';
                hiddenInput.id = 'projectId';
                hiddenInput.value = currentProjectId;
                document.getElementById('projectFormContent').appendChild(hiddenInput);
            }
            break;
    }
}

function findProject(id) {
    const projects = <%- JSON.stringify(projects) %>;
    return projects.find(p => p.id === id);
}

async function deleteProject(id) {
    if(confirm('Are you sure you want to delete this project?')) {
        const response = await fetch('/delete-project', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ id })
        });
        
        const data = await response.json();
        if (data.success) {
            location.reload();
        }
    }
}

document.getElementById('projectFormContent').addEventListener('submit', function(e) {
    if (currentAction === 'edit') {
        e.preventDefault();
        const formData = new FormData(this);
        fetch('/edit-project', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                id: formData.get('id'),
                title: formData.get('title'),
                description: formData.get('description')
            })
        }).then(response => {
            if (response.ok) {
                window.location.reload();
            }
        }).catch(error => {
            console.error('Error:', error);
            alert('Error updating project');
        });
    }
});

function closeModals() {
    document.getElementById('pinModal').style.display = 'none';
    document.getElementById('projectForm').style.display = 'none';
    document.getElementById('pinInput').value = '';
}

window.onclick = function(event) {
    if (event.target.className === 'modal') {
        closeModals();
    }
}

document.getElementById('pinInput').addEventListener('keyup', function(event) {
    if (event.key === 'Enter') {
        verifyPin();
    }
});

// Only initialize drag and drop if user is authorized
<% if (user && user.email === 'inbox@danielfaria.cc') { %>
    // Your existing drag and drop code here
    const projectGrid = document.getElementById('projectGrid');
    const projectCards = document.querySelectorAll('.project-card');

    projectCards.forEach(card => {
        card.addEventListener('dragstart', () => {
            card.classList.add('dragging');
        });

        card.addEventListener('dragend', () => {
            card.classList.remove('dragging');
            saveNewOrder();
        });
    });

    projectGrid.addEventListener('dragover', e => {
        e.preventDefault();
        const afterElement = getDragAfterElement(projectGrid, e.clientY);
        const draggable = document.querySelector('.dragging');
        if (afterElement == null) {
            projectGrid.appendChild(draggable);
        } else {
            projectGrid.insertBefore(draggable, afterElement);
        }
    });
<% } %>

// Simplified functions without PIN verification
async function editProject(projectId) {
    const project = findProject(projectId);
    if (project) {
        document.getElementById('projectForm').style.display = 'flex';
        document.querySelector('.modal-content h3').textContent = 'Edit Project';
        document.querySelector('input[name="title"]').value = project.title;
        document.querySelector('textarea[name="description"]').value = project.description;
        document.getElementById('projectFormContent').action = '/edit-project';
        let hiddenInput = document.getElementById('projectId') || document.createElement('input');
        hiddenInput.type = 'hidden';
        hiddenInput.name = 'id';
        hiddenInput.id = 'projectId';
        hiddenInput.value = projectId;
        document.getElementById('projectFormContent').appendChild(hiddenInput);
    }
}

function showProjectForm(action) {
    document.getElementById('projectForm').style.display = 'flex';
    document.getElementById('projectFormContent').reset();
    document.querySelector('.modal-content h3').textContent = 'Add New Project';
    document.getElementById('projectFormContent').action = '/add-project';
}

async function saveNewOrder() {
    const projectCards = document.querySelectorAll('.project-card');
    const newOrder = Array.from(projectCards).map(card => parseInt(card.dataset.id));
    
    try {
        const response = await fetch('/update-project-order', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ order: newOrder })
        });
        
        const data = await response.json();
        if (!response.ok || !data.success) {
            throw new Error(data.error || 'Failed to update project order');
        }
    } catch (error) {
        console.error('Error saving project order:', error);
        alert('Failed to save the new project order');
        location.reload();
    }
}

function getDragAfterElement(container, y) {
    const draggableElements = [...container.querySelectorAll('.project-card:not(.dragging)')];
    
    return draggableElements.reduce((closest, child) => {
        const box = child.getBoundingClientRect();
        const offset = y - box.top;
        
        if (offset < 0 && offset > closest.offset) {
            return { offset: offset, element: child };
        } else {
            return closest;
        }
    }, { offset: Number.NEGATIVE_INFINITY }).element;
}
</script>

<style>
.project-actions {
    margin-top: 1rem;
    display: flex;
    gap: 0.5rem;
    justify-content: flex-end;
}

.icon-btn {
    background: none;
    border: none;
    padding: 0.5rem;
    border-radius: 50%;
    cursor: pointer;
    transition: all 0.3s ease;
    width: 35px;
    height: 35px;
    display: flex;
    align-items: center;
    justify-content: center;
}

.edit-btn {
    color: var(--accent);
}

.edit-btn:hover {
    background: rgba(52, 152, 219, 0.1);
    transform: translateY(-2px);
}

.delete-btn {
    color: #e74c3c;
}

.delete-btn:hover {
    background: rgba(231, 76, 60, 0.1);
    transform: translateY(-2px);
}

.admin-button {
    margin-top: 2rem;
    padding: 0.8rem 1.5rem;
    background: var(--gradient);
    border: none;
    border-radius: 8px;
    color: white;
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.9rem;
    transition: all 0.3s ease;
}

.admin-button:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 15px rgba(52, 152, 219, 0.2);
}

.modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0,0,0,0.8);
    justify-content: center;
    align-items: center;
}

.modal-content {
    background: var(--card-bg);
    padding: 2rem;
    border-radius: 10px;
    width: 90%;
    max-width: 500px;
}

#projectFormContent {
    display: flex;
    flex-direction: column;
    gap: 1rem;
}

#projectFormContent input,
#projectFormContent textarea {
    padding: 0.8rem;
    border-radius: 4px;
    border: 1px solid var(--accent);
    background: rgba(255,255,255,0.1);
    color: white;
}

#pinInput {
    display: block;
    margin: 1rem 0;
    padding: 0.8rem;
    width: 140px;
    text-align: center;
    font-size: 1.5rem;
}

.submit-button {
    background: var(--gradient);
    color: white;
    padding: 0.8rem;
    border: none;
    border-radius: 8px;
    cursor: pointer;
    font-weight: 500;
}

.submit-button:hover {
    opacity: 0.9;
}

#projectFormContent textarea {
    min-height: 150px;
    resize: vertical;
}

.project-grid {
    display: flex;
    flex-direction: column;
    gap: 2rem;
    max-width: 800px;  /* Adjust this value as needed */
    margin: 0 auto;
}

.project-card {
    position: relative;
    background: var(--card-bg);
    padding: 2rem;
    border-radius: 10px;
    transition: all 0.3s ease;
    width: 100%;
    cursor: grab;
}

/* Optional: Add some hover effects */
.project-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 15px rgba(0,0,0,0.1);
}

/* Adjust the drag handle position if needed */
.drag-handle {
    position: absolute;
    top: 1rem;
    right: 1rem;
    color: var(--text-secondary);
    opacity: 0.5;
    transition: opacity 0.3s ease;
    cursor: grab;
}
</style>

<%- include('partials/footer') %> 